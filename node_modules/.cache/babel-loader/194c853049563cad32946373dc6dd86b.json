{"ast":null,"code":"var _jsxFileName = \"/Users/brunonovarini/project-would-you-rather/src/components/PollDashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Poll from \"./Poll\";\nimport { Grid, Button } from \"@material-ui/core\";\n\nclass PollDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      answered: false\n    };\n\n    this.handleAnswered = (e, answer) => {\n      e.preventDefault();\n      this.setState(() => ({\n        answered: answer\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      alignContent: \"center\",\n      direction: \"row\",\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => this.handleAnswered(e, false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, \"Unanswered Questions\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: e => this.handleAnswered(e, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }, \"Answered Questions\")))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, this.state.answered ? \"Answered Questions\" : \"Unanswered Questions\"), this.state.answered === true ? this.props.questionIds.map(id => this.props.answered[id] != null && /*#__PURE__*/React.createElement(Poll, {\n      key: id,\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 52\n      }\n    })) : this.props.questionIds.map(id => this.props.answered[id] == null && /*#__PURE__*/React.createElement(Poll, {\n      key: id,\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 52\n      }\n    })));\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  users,\n  questions\n}) {\n  return {\n    authedUser,\n    questionIds: Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp),\n    answered: users[authedUser].answers\n  };\n}\n\nexport default connect(mapStateToProps)(PollDashboard);","map":{"version":3,"sources":["/Users/brunonovarini/project-would-you-rather/src/components/PollDashboard.js"],"names":["React","Component","connect","Poll","Grid","Button","PollDashboard","state","answered","handleAnswered","e","answer","preventDefault","setState","render","props","questionIds","map","id","mapStateToProps","authedUser","users","questions","Object","keys","sort","a","b","timestamp","answers"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Poll from \"./Poll\";\nimport { Grid, Button } from \"@material-ui/core\";\n\nclass PollDashboard extends Component {\n  state = {\n    answered: false,\n  };\n\n  handleAnswered = (e, answer) => {\n    e.preventDefault();\n    this.setState(() => ({\n      answered: answer,\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <Grid container>\n          <Grid item>\n            <Grid container alignContent=\"center\" direction=\"row\" spacing={2}>\n              <Grid item>\n                <Button onClick={(e) => this.handleAnswered(e, false)}>\n                  Unanswered Questions\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button onClick={(e) => this.handleAnswered(e, true)}>\n                  Answered Questions\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item></Grid>\n        </Grid>\n\n        <h1>\n          {this.state.answered ? \"Answered Questions\" : \"Unanswered Questions\"}\n        </h1>\n        {this.state.answered === true\n          ? this.props.questionIds.map(\n              (id) =>\n                this.props.answered[id] != null && <Poll key={id} id={id} />\n            )\n          : this.props.questionIds.map(\n              (id) =>\n                this.props.answered[id] == null && <Poll key={id} id={id} />\n            )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ authedUser, users, questions }) {\n  return {\n    authedUser,\n    questionIds: Object.keys(questions).sort(\n      (a, b) => questions[b].timestamp - questions[a].timestamp\n    ),\n    answered: users[authedUser].answers,\n  };\n}\n\nexport default connect(mapStateToProps)(PollDashboard);\n"]},"metadata":{},"sourceType":"module"}