{"ast":null,"code":"var _jsxFileName = \"/Users/brunonovarini/project-would-you-rather/src/components/PollDashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Container, Grid } from \"@material-ui/core\";\nimport Poll from \"./Poll\";\n\nclass PollDashboard extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }\n    }, \"Unanswered Questions\"), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }\n    }, this.props.questionIds.map(id => this.props.answered[id] == null && /*#__PURE__*/React.createElement(Poll, {\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 58\n      }\n    })))), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, \"Answered Questions\"), this.props.questionIds.map(id => this.props.answered[id] != null && /*#__PURE__*/React.createElement(Poll, {\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 54\n      }\n    })));\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  users,\n  questions\n}) {\n  return {\n    authedUser,\n    questionIds: Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp),\n    answered: users[authedUser].answers\n  };\n}\n\nexport default connect(mapStateToProps)(PollDashboard);","map":{"version":3,"sources":["/Users/brunonovarini/project-would-you-rather/src/components/PollDashboard.js"],"names":["React","Component","connect","Container","Grid","Poll","PollDashboard","render","props","questionIds","map","id","answered","mapStateToProps","authedUser","users","questions","Object","keys","sort","a","b","timestamp","answers"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,mBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,aAAN,SAA4BL,SAA5B,CAAsC;AACpCM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,GAAvB,CACEC,EAAD,IAAQ,KAAKH,KAAL,CAAWI,QAAX,CAAoBD,EAApB,KAA2B,IAA3B,iBAAmC,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAEA,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5C,CADH,CADF,CAFF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATF,EAUG,KAAKH,KAAL,CAAWC,WAAX,CAAuBC,GAAvB,CACEC,EAAD,IAAQ,KAAKH,KAAL,CAAWI,QAAX,CAAoBD,EAApB,KAA2B,IAA3B,iBAAmC,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAEA,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5C,CAVH,CADF;AAgBD;;AAlBmC;;AAqBtC,SAASE,eAAT,CAAyB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAzB,EAA2D;AACzD,SAAO;AACLF,IAAAA,UADK;AAELL,IAAAA,WAAW,EAAEQ,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuBG,IAAvB,CACX,CAACC,CAAD,EAAIC,CAAJ,KAAUL,SAAS,CAACK,CAAD,CAAT,CAAaC,SAAb,GAAyBN,SAAS,CAACI,CAAD,CAAT,CAAaE,SADrC,CAFR;AAKLV,IAAAA,QAAQ,EAAEG,KAAK,CAACD,UAAD,CAAL,CAAkBS;AALvB,GAAP;AAOD;;AAED,eAAerB,OAAO,CAACW,eAAD,CAAP,CAAyBP,aAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Container, Grid } from \"@material-ui/core\";\nimport Poll from \"./Poll\";\n\nclass PollDashboard extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Unanswered Questions</h1>\n        <Container>\n          <Grid container direction=\"row\">\n            {this.props.questionIds.map(\n              (id) => this.props.answered[id] == null && <Poll id={id} />\n            )}\n          </Grid>\n        </Container>\n        <h1>Answered Questions</h1>\n        {this.props.questionIds.map(\n          (id) => this.props.answered[id] != null && <Poll id={id} />\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ authedUser, users, questions }) {\n  return {\n    authedUser,\n    questionIds: Object.keys(questions).sort(\n      (a, b) => questions[b].timestamp - questions[a].timestamp\n    ),\n    answered: users[authedUser].answers,\n  };\n}\n\nexport default connect(mapStateToProps)(PollDashboard);\n"]},"metadata":{},"sourceType":"module"}