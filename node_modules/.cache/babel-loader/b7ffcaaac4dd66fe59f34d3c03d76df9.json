{"ast":null,"code":"var _jsxFileName = \"/Users/brunonovarini/project-would-you-rather/src/components/Question.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Question extends Component {\n  render() {\n    const {\n      question,\n      questionAuthor,\n      authedUser\n    } = this.props;\n\n    if (question === null) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 14\n        }\n      }, \"This question doesn't exist\");\n    }\n\n    const {\n      optionOne,\n      optionTwo\n    } = question;\n    const {\n      name,\n      avatarURL\n    } = questionAuthor;\n    const answered = optionOne.votes[authedUser] !== null || optionTwo.votes[authedUser] !== null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 12\n      }\n    }, !answered ? \"Unanswered\" : \"Answered\");\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  users,\n  questions\n}, {\n  id\n}) {\n  const question = questions[id];\n  return {\n    authedUser,\n    question: question,\n    questionAuthor: users[question.author]\n  };\n}\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/brunonovarini/project-would-you-rather/src/components/Question.js"],"names":["React","Component","connect","Question","render","question","questionAuthor","authedUser","props","optionOne","optionTwo","name","avatarURL","answered","votes","mapStateToProps","users","questions","id","author"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,cAAZ;AAA4BC,MAAAA;AAA5B,QAA2C,KAAKC,KAAtD;;AAEA,QAAIH,QAAQ,KAAK,IAAjB,EAAuB;AACrB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAP;AACD;;AAED,UAAM;AAAEI,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2BL,QAAjC;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAsBN,cAA5B;AAEA,UAAMO,QAAQ,GACZJ,SAAS,CAACK,KAAV,CAAgBP,UAAhB,MAAgC,IAAhC,IACAG,SAAS,CAACI,KAAV,CAAgBP,UAAhB,MAAgC,IAFlC;AAIA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,CAACM,QAAD,GAAY,YAAZ,GAA2B,UAAjC,CAAP;AACD;;AAhB8B;;AAmBjC,SAASE,eAAT,CAAyB;AAAER,EAAAA,UAAF;AAAcS,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAzB,EAA2D;AAAEC,EAAAA;AAAF,CAA3D,EAAmE;AACjE,QAAMb,QAAQ,GAAGY,SAAS,CAACC,EAAD,CAA1B;AAEA,SAAO;AACLX,IAAAA,UADK;AAELF,IAAAA,QAAQ,EAAEA,QAFL;AAGLC,IAAAA,cAAc,EAAEU,KAAK,CAACX,QAAQ,CAACc,MAAV;AAHhB,GAAP;AAKD;;AAED,eAAejB,OAAO,CAACa,eAAD,CAAP,CAAyBZ,QAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Question extends Component {\n  render() {\n    const { question, questionAuthor, authedUser } = this.props;\n\n    if (question === null) {\n      return <p>This question doesn't exist</p>;\n    }\n\n    const { optionOne, optionTwo } = question;\n    const { name, avatarURL } = questionAuthor;\n\n    const answered =\n      optionOne.votes[authedUser] !== null ||\n      optionTwo.votes[authedUser] !== null;\n\n    return <div>{!answered ? \"Unanswered\" : \"Answered\"}</div>;\n  }\n}\n\nfunction mapStateToProps({ authedUser, users, questions }, { id }) {\n  const question = questions[id];\n\n  return {\n    authedUser,\n    question: question,\n    questionAuthor: users[question.author],\n  };\n}\n\nexport default connect(mapStateToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}